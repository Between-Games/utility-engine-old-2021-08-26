// ╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔════╗╔═╗╔═══════╗         ╔═══════╗╔═══════╗╔═══════╗╔═╗   ╔═╗╔═══════╗╔═══════╗╔═══════╗   ╔═══════╗╔═══════╗╔═══════╗
// ║ ╔═════╝╚══╗ ╔══╝║ ╔═══╗ ║╚══╗ ╔══╝║ ╔╗ ║║ ║║ ╔═════╝         ║ ╔╗ ╔╗ ║║ ╔═════╝╚══╗ ╔══╝║ ║   ║ ║║ ╔═══╗ ║╚╗ ╔══╗ ║║ ╔═════╝   ║ ╔╗ ╔╗ ║╚═══╗ ╔═╝║ ╔═════╝
// ║ ╚═════╗   ║ ║   ║ ╚═══╝ ║   ║ ║   ║ ║║ ║║ ║║ ║ ╔═══╗╔═══════╗║ ║║ ║║ ║║ ╚═════╗   ║ ║   ║ ╚═══╝ ║║ ║   ║ ║ ║ ║  ║ ║║ ╚═════╗   ║ ║║ ║║ ║    ║ ║  ║ ╚═════╗
// ╚═════╗ ║   ║ ║   ║ ╔═╗ ╔═╝   ║ ║   ║ ║║ ║║ ║║ ║ ╚═╗ ║╚═══════╝║ ║║ ║║ ║║ ╔═════╝   ║ ║   ║ ╔═══╗ ║║ ║   ║ ║ ║ ║  ║ ║╚═════╗ ║   ║ ║║ ║║ ║    ║ ║  ╚═════╗ ║
// ╔═════╝ ║   ║ ║   ║ ║ ║ ╚═╗╔══╝ ╚══╗║ ║║ ╚╝ ║║ ╚═══╝ ║         ║ ║║ ║║ ║║ ╚═════╗   ║ ║   ║ ║   ║ ║║ ╚═══╝ ║╔╝ ╚══╝ ║╔═════╝ ║╔═╗║ ║║ ║║ ║╔═══╝ ║  ╔═════╝ ║
// ╚═══════╝   ╚═╝   ╚═╝ ╚═══╝╚═══════╝╚═╝╚════╝╚═══════╝         ╚═╝╚═╝╚═╝╚═══════╝   ╚═╝   ╚═╝   ╚═╝╚═══════╝╚═══════╝╚═══════╝╚═╝╚═╝╚═╝╚═╝╚═════╝  ╚═══════╝

// ╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗
// ╚══╗ ╔══╝║ ╔╗ ╔╗ ║║ ╔═══╗ ║║ ╔═══╗ ║║ ╔═══╗ ║╚══╗ ╔══╝║ ╔═════╝
//    ║ ║   ║ ║║ ║║ ║║ ╚═══╝ ║║ ║   ║ ║║ ╚═══╝ ║   ║ ║   ║ ╚═════╗
//    ║ ║   ║ ║║ ║║ ║║ ╔═════╝║ ║   ║ ║║ ╔═╗ ╔═╝   ║ ║   ╚═════╗ ║
// ╔══╝ ╚══╗║ ║║ ║║ ║║ ║      ║ ╚═══╝ ║║ ║ ║ ╚═╗   ║ ║   ╔═════╝ ║
// ╚═══════╝╚═╝╚═╝╚═╝╚═╝      ╚═══════╝╚═╝ ╚═══╝   ╚═╝   ╚═══════╝

import * as numberMethods from '../number/number-methods.mjs';

// ╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔════╗╔═╗╔═══════╗
// ║ ╔═════╝╚══╗ ╔══╝║ ╔═══╗ ║╚══╗ ╔══╝║ ╔╗ ║║ ║║ ╔═════╝
// ║ ╚═════╗   ║ ║   ║ ╚═══╝ ║   ║ ║   ║ ║║ ║║ ║║ ║ ╔═══╗
// ╚═════╗ ║   ║ ║   ║ ╔═╗ ╔═╝   ║ ║   ║ ║║ ║║ ║║ ║ ╚═╗ ║
// ╔═════╝ ║   ║ ║   ║ ║ ║ ╚═╗╔══╝ ╚══╗║ ║║ ╚╝ ║║ ╚═══╝ ║
// ╚═══════╝   ╚═╝   ╚═╝ ╚═══╝╚═══════╝╚═╝╚════╝╚═══════╝

export function isString(value, minimumLength = 0, maximumLength = Number.POSITIVE_INFINITY) {
    return numberMethods.isNumber(minimumLength, 0, maximumLength) &&
        numberMethods.isNumber(maximumLength, minimumLength) &&
        value != null &&
        value.constructor === String &&
        value.length >= minimumLength &&
        value.length <= maximumLength;
}

// ╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═╗   ╔═╗
// ║ ╔═════╝║ ╔╗ ╔╗ ║║ ╔═══╗ ║╚══╗ ╔══╝║ ║   ║ ║
// ║ ╚═════╗║ ║║ ║║ ║║ ╚═══╝ ║   ║ ║   ║ ╚═══╝ ║
// ║ ╔═════╝║ ║║ ║║ ║║ ╔═════╝   ║ ║   ╚═════╗ ║
// ║ ╚═════╗║ ║║ ║║ ║║ ║         ║ ║   ╔═════╝ ║
// ╚═══════╝╚═╝╚═╝╚═╝╚═╝         ╚═╝   ╚═══════╝

export function isEmptyString(value) {
    return isString(value) &&
        '' === value.trim();
}

// ╔═══════╗╔═══════╗╔═╗      ╔═╗      ╔═══════╗╔═══════╗
// ║ ╔═════╝╚══╗ ╔══╝║ ║      ║ ║      ║ ╔═════╝╚╗ ╔══╗ ║
// ║ ╚═════╗   ║ ║   ║ ║      ║ ║      ║ ╚═════╗ ║ ║  ║ ║
// ║ ╔═════╝   ║ ║   ║ ║      ║ ║      ║ ╔═════╝ ║ ║  ║ ║
// ║ ║      ╔══╝ ╚══╗║ ╚═════╗║ ╚═════╗║ ╚═════╗╔╝ ╚══╝ ║
// ╚═╝      ╚═══════╝╚═══════╝╚═══════╝╚═══════╝╚═══════╝

export function isFilledString(value, maximumLength = Number.POSITIVE_INFINITY) {
    return isString(value, 1, maximumLength) &&
        '' !== value.trim();
}

