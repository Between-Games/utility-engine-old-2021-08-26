// ╔════╗╔═╗╔═╗   ╔═╗╔═══════╗╔══════╗ ╔═══════╗╔═══════╗         ╔═══════╗╔═══════╗╔═══════╗╔═╗   ╔═╗╔═══════╗╔═══════╗╔═══════╗   ╔═══════╗╔═══════╗╔═══════╗
// ║ ╔╗ ║║ ║║ ║   ║ ║║ ╔╗ ╔╗ ║║ ╔══╗ ║ ║ ╔═════╝║ ╔═══╗ ║         ║ ╔╗ ╔╗ ║║ ╔═════╝╚══╗ ╔══╝║ ║   ║ ║║ ╔═══╗ ║╚╗ ╔══╗ ║║ ╔═════╝   ║ ╔╗ ╔╗ ║╚═══╗ ╔═╝║ ╔═════╝
// ║ ║║ ║║ ║║ ║   ║ ║║ ║║ ║║ ║║ ╚══╝ ╚╗║ ╚═════╗║ ╚═══╝ ║╔═══════╗║ ║║ ║║ ║║ ╚═════╗   ║ ║   ║ ╚═══╝ ║║ ║   ║ ║ ║ ║  ║ ║║ ╚═════╗   ║ ║║ ║║ ║    ║ ║  ║ ╚═════╗
// ║ ║║ ║║ ║║ ║   ║ ║║ ║║ ║║ ║║ ╔═══╗ ║║ ╔═════╝║ ╔═╗ ╔═╝╚═══════╝║ ║║ ║║ ║║ ╔═════╝   ║ ║   ║ ╔═══╗ ║║ ║   ║ ║ ║ ║  ║ ║╚═════╗ ║   ║ ║║ ║║ ║    ║ ║  ╚═════╗ ║
// ║ ║║ ╚╝ ║║ ╚═══╝ ║║ ║║ ║║ ║║ ╚═══╝ ║║ ╚═════╗║ ║ ║ ╚═╗         ║ ║║ ║║ ║║ ╚═════╗   ║ ║   ║ ║   ║ ║║ ╚═══╝ ║╔╝ ╚══╝ ║╔═════╝ ║╔═╗║ ║║ ║║ ║╔═══╝ ║  ╔═════╝ ║
// ╚═╝╚════╝╚═══════╝╚═╝╚═╝╚═╝╚═══════╝╚═══════╝╚═╝ ╚═══╝         ╚═╝╚═╝╚═╝╚═══════╝   ╚═╝   ╚═╝   ╚═╝╚═══════╝╚═══════╝╚═══════╝╚═╝╚═╝╚═╝╚═╝╚═════╝  ╚═══════╝

// ╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗
// ╚══╗ ╔══╝║ ╔╗ ╔╗ ║║ ╔═══╗ ║║ ╔═══╗ ║║ ╔═══╗ ║╚══╗ ╔══╝║ ╔═════╝
//    ║ ║   ║ ║║ ║║ ║║ ╚═══╝ ║║ ║   ║ ║║ ╚═══╝ ║   ║ ║   ║ ╚═════╗
//    ║ ║   ║ ║║ ║║ ║║ ╔═════╝║ ║   ║ ║║ ╔═╗ ╔═╝   ║ ║   ╚═════╗ ║
// ╔══╝ ╚══╗║ ║║ ║║ ║║ ║      ║ ╚═══╝ ║║ ║ ║ ╚═╗   ║ ║   ╔═════╝ ║
// ╚═══════╝╚═╝╚═╝╚═╝╚═╝      ╚═══════╝╚═╝ ╚═══╝   ╚═╝   ╚═══════╝

// ╔════╗╔═╗╔═╗   ╔═╗╔═══════╗╔══════╗ ╔═══════╗╔═══════╗
// ║ ╔╗ ║║ ║║ ║   ║ ║║ ╔╗ ╔╗ ║║ ╔══╗ ║ ║ ╔═════╝║ ╔═══╗ ║
// ║ ║║ ║║ ║║ ║   ║ ║║ ║║ ║║ ║║ ╚══╝ ╚╗║ ╚═════╗║ ╚═══╝ ║
// ║ ║║ ║║ ║║ ║   ║ ║║ ║║ ║║ ║║ ╔═══╗ ║║ ╔═════╝║ ╔═╗ ╔═╝
// ║ ║║ ╚╝ ║║ ╚═══╝ ║║ ║║ ║║ ║║ ╚═══╝ ║║ ╚═════╗║ ║ ║ ╚═╗
// ╚═╝╚════╝╚═══════╝╚═╝╚═╝╚═╝╚═══════╝╚═══════╝╚═╝ ╚═══╝

export function isNumber(value, minimum = Number.NEGATIVE_INFINITY, maximum = Number.POSITIVE_INFINITY) {
    if (
        typeof minimum !== 'number' ||
        typeof maximum !== 'number' ||
        minimum > maximum
    ) return false;

    return typeof value === 'number' &&
        value >= minimum &&
        value <= maximum;
}

// ╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═╗   ╔═╗╔═══════╗
// ║ ╔═══╗ ║║ ╔═══╗ ║║ ╔═════╝╚══╗ ╔══╝╚══╗ ╔══╝╚══╗ ╔══╝║ ║   ║ ║║ ╔═════╝
// ║ ╚═══╝ ║║ ║   ║ ║║ ╚═════╗   ║ ║      ║ ║      ║ ║   ║ ╚╗ ╔╝ ║║ ╚═════╗
// ║ ╔═════╝║ ║   ║ ║╚═════╗ ║   ║ ║      ║ ║      ║ ║   ╚╗ ║ ║ ╔╝║ ╔═════╝
// ║ ║      ║ ╚═══╝ ║╔═════╝ ║╔══╝ ╚══╗   ║ ║   ╔══╝ ╚══╗ ║ ╚═╝ ║ ║ ╚═════╗
// ╚═╝      ╚═══════╝╚═══════╝╚═══════╝   ╚═╝   ╚═══════╝ ╚═════╝ ╚═══════╝

export function isPositiveNumber(value, maximum = Number.POSITIVE_INFINITY) {
    return isNumber(maximum, 0) &&
        isNumber(value, 0, maximum);
}

// ╔════╗╔═╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═╗   ╔═╗╔═══════╗
// ║ ╔╗ ║║ ║║ ╔═════╝║ ╔═════╝║ ╔═══╗ ║╚══╗ ╔══╝╚══╗ ╔══╝║ ║   ║ ║║ ╔═════╝
// ║ ║║ ║║ ║║ ╚═════╗║ ║ ╔═══╗║ ╚═══╝ ║   ║ ║      ║ ║   ║ ╚╗ ╔╝ ║║ ╚═════╗
// ║ ║║ ║║ ║║ ╔═════╝║ ║ ╚═╗ ║║ ╔═══╗ ║   ║ ║      ║ ║   ╚╗ ║ ║ ╔╝║ ╔═════╝
// ║ ║║ ╚╝ ║║ ╚═════╗║ ╚═══╝ ║║ ║   ║ ║   ║ ║   ╔══╝ ╚══╗ ║ ╚═╝ ║ ║ ╚═════╗
// ╚═╝╚════╝╚═══════╝╚═══════╝╚═╝   ╚═╝   ╚═╝   ╚═══════╝ ╚═════╝ ╚═══════╝

export function isNegativeNumber(value, minimum = Number.NEGATIVE_INFINITY) {
    return isNumber(minimum, undefined, 0) &&
        isNumber(value, minimum, 0);
}

// ╔══════╗ ╔═══════╗╔═══════╗
// ║ ╔══╗ ║ ╚══╗ ╔══╝╚══╗ ╔══╝
// ║ ╚══╝ ╚╗   ║ ║      ║ ║
// ║ ╔═══╗ ║   ║ ║      ║ ║
// ║ ╚═══╝ ║╔══╝ ╚══╗   ║ ║
// ╚═══════╝╚═══════╝   ╚═╝

export function isBit(value) {
    return value === 0 || value === 1;
}
